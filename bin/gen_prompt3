#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""gen_prompt - $description


Copyright (C) 2019 John van Zantvoort

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

import argparse
import sys
import os
import socket
import configparser
import base64
import traceback
from string import Template

__author__ = "John van Zantvoort"
__copyright__ = "$copyright"
__email__ = "$mailaddress"
__license__ = "$license"
__version__ = "1.0.1"
HOSTNAME = socket.gethostname().split('.').pop(0).lower()


class Constants(object):

    def __init__(self):

        self.default_colors = {}
        self.configfile = '~/.userconfig.cfg'
        self.promptdir = os.path.expanduser("~/.bash/prompt.d")
        self.promptfile = "%s/%s.sh" % (self.promptdir, HOSTNAME)
        self.default_colors['main_color'] = 'light_cyan'
        self.default_colors['os_color'] = 'green'
        self.default_colors['dir_color'] = 'yellow'
        self.default_colors['end_color'] = 'end'
        self.format_tmpl = """
PS1="$main_color\\u@\h$end_color/$os_color$osname$end_color \T [$dir_color\w$end_color]
# "
"""

        self.colors = {
            'end':         """\[\033[0m\]""",
            'black':       """\[\033[0;30m\]""",
            'red':         """\[\033[0;31m\]""",
            'green':       """\[\033[0;32m\]""",
            'brown':       """\[\033[0;33m\]""",
            'blue':        """\[\033[0;34m\]""",
            'purple':      """\[\033[0;35m\]""",
            'cyan':        """\[\033[0;36m\]""",
            'light_gray':  """\[\033[0;37m\]""",

            'dark_gray':   """\[\033[1;30m\]""",
            'gray':        """\[\033[1:30m\]""",
            'light_blue':  """\[\033[1;34m\]""",
            'light_cyan':  """\[\033[1;36m\]""",
            'light_green': """\[\033[1;32m\]""",
            'light_purpl': """\[\033[1;35m\]""",
            'light_red':   """\[\033[1;31m\]""",
            'white':       """\[\033[1;37m\]""",
            'yellow':      """\[\033[1;33m\]""", }

        self.lsb_files = (('/etc/centos-release', 'CentOS', 'redhat'),
                          ('/etc/fedora-release', 'Fedora', 'redhat'),
                          ('/etc/redhat-release', 'RedHat', 'redhat'),
                          ('/etc/SuSE-release', 'SuSE', 'suse'),
                          ('/etc/mandrake-release', 'Mandrake', 'mandrake'),
                          ('/etc/debian_version', 'Debian', 'debian'),
                          ('/etc/wrs-release', 'WindRiver', 'windriver'),
                          ('/etc/snow-release', 'Snow', 'snow'))


class UserConfig(object):


    def __init__(self):
        self.const = Constants()
        self._configfile = os.path.expanduser(self.const.configfile)
        self._hostname = HOSTNAME
        self._defaults = self.const.default_colors
        self.readconfig()

    def readconfig(self):
        self.config = configparser.ConfigParser(defaults=self.const.default_colors)
        self.config.read(self._configfile)
        if not self.config.has_section(self._hostname):
            self.config.add_section(self._hostname)
            for keyname in self.const.default_colors.keys():
                self.config.set(self._hostname, keyname,
                                self.config.get(self._hostname, keyname))

    def writeconfig(self):
        with open(self._configfile, 'w') as configfile:
            self.config.write(configfile)

    def set(self, varname, varvalue):
        colorkeys = self.const.colors.keys()
        if varvalue not in colorkeys:
            raise KeyError("""key %s has wrong value %s""" % (varname, ", ".join(colorkeys)))

        self.config.set(self._hostname, varname, varvalue)
        self.writeconfig()

    def get(self, varname):
        return self.config.get(self._hostname, varname)

    @property
    def defaults(self):
        return self.config.defaults()

    @property
    def hostconfig(self):
        retv = dict()
        for keyname in self.const.default_colors.keys():
            retv[keyname] = self.get(keyname)
        return retv


class OSIdentify(object):

    def __init__(self):
        self.const = Constants()
        self._osname = os.uname()[0]
        self._osclass = self._osname.lower()
        self._osreleasefile = '/etc/os-release'
        self.osname = None
        self.osclass = None

        if self._osname in "Linux":
            self.Linux()

        elif self._osname in "Darwin":
            self.Darwin()

        elif self._osname in "SunOS":
            self.SunOS()

    def read_osrelease(self):
        retv = dict()
        try:
            for line in open(self._osreleasefile).readlines():
                line = line.strip('\n').strip()
                cols = line.split('=')
                varname = cols.pop(0)
                varval = "=".join(cols).strip('"').strip('\'')
                retv[varname] = varval
        except:
            pass
        return retv

    def lsb_files(self):
        for row in self.const.lsb_files:
            if os.path.exists(row[0]):
                retv = dict(zip(('lsbfile', 'osname', 'osclass'), row))
        data = self.read_osrelease()
        if "NAME" in data:
            retv['osname'] = data['NAME']

        self.osname = retv.get('osname')
        self.osclass = retv.get('osclass')

        return retv

    def Linux(self):
        self.lsb_files()

    def Darwin(self):
        self.osname = "Darwin"
        self.osclass = "mac"

    def SunOS(self):
        self.osname = "SunOS"
        self.osclass = "solaris"

    def __str__(self):
        return self.osname


class Prompt:


    def cn(self, kwargs, instr):
        retv = str()
        cn = kwargs[instr]
        retv = self.const.colors[cn]
        return retv


    def __init__(self, **kwargs):

        self.vars = {}
        self.const = Constants()
        self.format_tmpl = kwargs.get('format', self.const.format_tmpl)
        self.colors = self.const.default_colors
        colornames = [x for x in self.const.default_colors if x.endswith('_color')]


        for i in kwargs.keys():
            if i in colornames:
                self.colors[i] = self.cn(kwargs, i)
            else:
                self.vars[i] = kwargs[i]

    @property
    def text(self):
        data = {}
        for i in self.colors.keys():
            data[i] = self.colors[i]

        for i in self.vars.keys():
            data[i] = self.vars[i]

        try:
            t_obj = Template(str(self.format_tmpl))
            retv = t_obj.safe_substitute(**data)
        except (AttributeError, TypeError):
            edata = traceback.format_exc()
            print(self.format_tmpl)
            print(data)
        return retv

    def __repr__(self):
        return self.text


class GenPrompt(object):

    def __init__(self, **kwargs):
        self.const = Constants()
        self.userconfig = UserConfig()
        self.osid = OSIdentify()

        self.osclass = self.osid.osclass
        self.osname = self.osid.osname


    @property
    def variables(self):
        retv = {}
        for k, v in self.userconfig.hostconfig.items():
            retv[k] = v
        retv['osclass'] = self.osclass
        retv['osname'] = self.osname
        return retv

    def set(self, varname, varvalue):
        self.userconfig.set(varname, varvalue)

    def build(self):
        try:
            os.makedirs(self.const.promptdir)
        except:
            pass

        self.prompt = Prompt(**self.variables)
        with open(self.const.promptfile, "w") as ofh:
            ofh.write(self.prompt.text)


def parse_args(args):
    """
    Parse command line parameters

    :param args: command line parameters as list of strings
    :return: command line parameters as :obj:`argparse.Namespace`
    """
    retv = dict()
    parser = argparse.ArgumentParser()

    parser.add_argument(
        '--version',
        action='version',
        version='gen_prompt {ver}'.format(ver=__version__))

    parser.add_argument('--main', dest='main_color', help="set color for main")
    parser.add_argument('--os', dest='os_color', help="set color for os")
    parser.add_argument('--dir', dest='dir_color', help="set color for dir")

    parser.add_argument("-r", dest="RESET", action="store_true",
                        help="reset the prompt" )

    opts = vars(parser.parse_args(args))

    for keyn, keyv in opts.items():
        if keyv is not None:
            retv[keyn] = keyv

    return retv


def main(args):
    args = parse_args(args)
    gp = GenPrompt()
    write = False

    reset = args.get('RESET')
    if reset:
        write = True

    for keyname in ['main_color', 'os_color', 'dir_color']:
        keyvalue = args.get(keyname)
        if keyvalue:
            gp.set(keyname, keyvalue)
            write = True

    if write:
        gp.build()

if __name__ == "__main__":
    try:
        main(sys.argv[1:])
    except KeyError as err:
        print(err)
